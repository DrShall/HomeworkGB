/* ======================================================================
1. Написать шаблонную функцию div, которая должна вычислять результат деления двух параметров
и запускать исключение DivisionByZero, если второй параметр равен 0.
В функции main выводить результат вызова функции div в консоль, а также ловить исключения.

2. Написать класс Ex, хранящий вещественное число x и имеющий конструктор по вещественному числу,
 инициализирующий x значением параметра. Написать класс Bar, хранящий вещественное число y
(конструктор по умолчанию инициализирует его нулем) и имеющий метод set с единственным
 вещественным параметром a. Если y + a > 100, возбуждается исключение типа Ex с данными a*y,
 иначе в y заносится значение a. В функции main завести переменную класса Bar и в цикле
 в блоке try вводить с клавиатуры целое n. Использовать его в качестве параметра
метода set до тех пор, пока не будет введено 0. В обработчике исключения выводить
сообщение об ошибке, содержащее данные объекта исключения.

3. Написать класс «робот», моделирующий перемещения робота по сетке 10x10, у которого есть метод,
 означающий задание переместиться на соседнюю позицию. Эти методы должны запускать
классы-исключения OffTheField, если робот должен уйти с сетки, и IllegalCommand,
 если подана неверная команда (направление не находится в нужном диапазоне).
Объект исключения должен содержать всю необходимую информацию — текущую позицию и направление движения.
 Написать функцию main, пользующуюся этим классом и перехватывающую все исключения от его методов,
 а также выводящую подробную информацию о всех возникающих ошибках.
======================================================================*/

#include <iostream>
#include <time.h>
#include "myclasses.h"

using namespace std;

int main()
{
	// Task 1
	{
	cout << " Task 1" << endl;
	try {
		double result = mylib::div( 4.5, 0.0);
		cout << result << endl;
		}
	catch (const DivisionByZero& err)
		{
		cerr << err.getMessage() << endl;
		}

	}


	// Task 2
	{
	cout << endl << " Task 2" << endl;
	Bar val;
	try
	{
		int n = 1;
		do
		{
			cout << "Enter n (0 for exit):";
			cin >> n;
			val.set(n);
		}
		while(n);
	}
	catch(const Ex& err)
	{
		cout << err.getX() << endl;
	}

	}

	// Task 3
	{
	cout << endl << " Task 3" << endl;
	srand(time(NULL));

	Robot r(rand()%10 +1, rand()%10 +1);
	int x;
	int y;
	while(true)
	{
		cout << "Enter offset for position: (for exit enter 0 : 0)" << endl << "Offset X = ";
		cin >> x;
		cout << "Offset Y = ";
		cin >> y;
		if ( x == 0 && y == 0 )
			break;
		try {
			r.move( x, y);
		}
		catch (IllegalCommand& err) { cout << endl; }
		catch (OffTheField& err) { cout << endl; }

	}
	}
}
